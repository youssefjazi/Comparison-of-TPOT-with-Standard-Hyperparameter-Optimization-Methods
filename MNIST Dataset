
from time import time
from scipy.stats import randint as sp_randint
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import RandomizedSearchCV
from sklearn.datasets import load_digits
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
import autosklearn.classification
import sklearn.model_selection
import sklearn.datasets
import sklearn.metrics 
from  tpot import TPOTClassifier



# get MNIST data and split it into training and test data
digits = load_digits()
X, y = digits.data, digits.target

X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.25, random_state=20)


# build a classifier for Random Search and Grid Search
clf = RandomForestClassifier()



# specify parameters and distributions to sample from
param_dist = {"max_depth": [3, None],
              "max_features": sp_randint(1, 11),
              "min_samples_split": sp_randint(2, 11),
              "min_samples_leaf": sp_randint(1, 11),
              "bootstrap": [True, False],
              "criterion": ["gini", "entropy"]}

# Run Random Search
n_iter_search = 100
random_search = RandomizedSearchCV(clf, param_distributions=param_dist,
                                   n_iter=n_iter_search)

start = time()
best_model=random_search.fit(X_train, y_train)
print("Randome Search took %.2f seconds"
      " parameter settings." % ((time() - start)))

print("Score for Random Search", random_search.score(X_test, y_test))

print("Best for Random Search \n",  best_model.best_estimator_.get_params())

# use a full grid over all parameters

param_grid = {"max_depth": [3, None],
              "max_features": [1, 3, 10],
              "min_samples_split": [2, 3, 10],
              "min_samples_leaf": [1, 3, 10],
              "bootstrap": [True, False],
              "criterion": ["gini", "entropy"]}

# run Grid Search
grid_search = GridSearchCV(clf, param_grid=param_grid)
start = time()
# Fit grid search
best_model = grid_search.fit(X_train, y_train)


print("GridSearchCV took %.2f seconds" % (time() - start))
      
print("Score for Grid Search", grid_search.score(X_test, y_test))

print("Best for Grid Search \n", best_model.best_estimator_.get_params())

#Run TPOT

tpot = TPOTClassifier(verbosity=2, max_time_mins=8, population_size=40)
tpot.fit(X_train, y_train)

print(tpot.score(X_test, y_test))

#Run Auto-sklearn
automl = autosklearn.classification.AutoSklearnClassifier()
automl.fit(X_train, y_train)
y_hat = automl.predict(X_test)
print("Accuracy score", sklearn.metrics.accuracy_score(y_test, y_hat))
